import { Platform } from 'react-native';
import { supabase } from './supabase';

let Notifications = null;
let AsyncStorage = null;
let Device = null;

if (Platform.OS !== 'web') {
    Notifications = require('expo-notifications');
    AsyncStorage = require('@react-native-async-storage/async-storage').default;
    Device = require('expo-device');
}

// Configuration des notifications pour iOS/Android
if (Platform.OS !== 'web') {
    Notifications.setNotificationHandler({
        handleNotification: async () => ({
            shouldShowAlert: true,
            shouldPlaySound: true,
            shouldSetBadge: false,
        }),
    });
}

//
// üîî FONCTION PRINCIPALE - Initialisation compl√®te des notifications
//
export async function setupNotifications(userId = null) {
    if (Platform.OS === 'web') {
        console.log('[Web] Notifications non support√©es sur web');
        return null;
    }

    try {
        console.log('üîî D√©but configuration notifications pour userId:', userId);

        // 1. V√©rifier que c'est un device physique
        if (!Device.default.isDevice) {
            console.warn('Les notifications push ne fonctionnent que sur un appareil physique');
            return null;
        }

        // 2. Demander les permissions
        const { status: existingStatus } = await Notifications.getPermissionsAsync();
        let finalStatus = existingStatus;

        if (existingStatus !== 'granted') {
            const { status } = await Notifications.requestPermissionsAsync();
            finalStatus = status;
        }

        if (finalStatus !== 'granted') {
            console.warn('‚ùå Permissions notifications refus√©es');
            return null;
        }

        console.log('‚úÖ Permissions notifications accord√©es');

        // 3. R√©cup√©rer le token Expo Push
        const tokenData = await Notifications.getExpoPushTokenAsync({
            projectId: process.env.EXPO_PUBLIC_PROJECT_ID || 'your-expo-project-id', // Remplacez par votre Project ID
        });

        const expoPushToken = tokenData.data;
        console.log('üéØ Token Expo Push g√©n√©r√©:', expoPushToken);

        // 4. Sauvegarder localement
        await AsyncStorage.setItem('expo_push_token', expoPushToken);

        // 5. Sauvegarder en base dans la table utilisateurs si userId fourni
        if (userId && expoPushToken) {
            await saveTokenToUserTable(userId, expoPushToken);
        }

        return expoPushToken;
    } catch (error) {
        console.error('‚ùå Erreur configuration notifications:', error);
        return null;
    }
}

//
// üíæ Sauvegarder le token dans la table utilisateurs
//
export async function saveTokenToUserTable(userId, expoPushToken) {
    try {
        console.log('üíæ Sauvegarde token dans table utilisateurs...', {
            userId,
            token: expoPushToken,
        });

        // V√©rifier d'abord si le token a chang√©
        const { data: currentUser, error: fetchError } = await supabase
            .from('utilisateurs')
            .select('expo_push_token')
            .eq('id', userId)
            .single();

        if (fetchError) {
            console.error('‚ùå Erreur r√©cup√©ration utilisateur:', fetchError);
            return;
        }

        // Si le token est diff√©rent, le mettre √† jour
        if (currentUser.expo_push_token !== expoPushToken) {
            const { error: updateError } = await supabase
                .from('utilisateurs')
                .update({
                    expo_push_token: expoPushToken,
                })
                .eq('id', userId);

            if (updateError) {
                console.error('‚ùå Erreur sauvegarde token:', updateError);
            } else {
                console.log('‚úÖ Token mis √† jour dans table utilisateurs');
            }
        } else {
            console.log('‚ÑπÔ∏è Token identique, pas de mise √† jour n√©cessaire');
        }
    } catch (error) {
        console.error('‚ùå Erreur saveTokenToUserTable:', error);
    }
}

//
// üîÑ R√©cup√©rer le token depuis la base de donn√©es
//
export async function getTokenFromDatabase(userId) {
    try {
        const { data, error } = await supabase
            .from('utilisateurs')
            .select('expo_push_token')
            .eq('id', userId)
            .single();

        if (error) {
            console.error('Erreur r√©cup√©ration token BDD:', error);
            return null;
        }

        return data?.expo_push_token || null;
    } catch (error) {
        console.error('‚ùå Erreur getTokenFromDatabase:', error);
        return null;
    }
}

//
// üîÑ R√©cup√©rer le token stock√© localement
//
export async function getStoredExpoPushToken() {
    if (Platform.OS === 'web') {
        return null;
    }

    try {
        const token = await AsyncStorage.getItem('expo_push_token');
        return token;
    } catch (error) {
        console.error('Erreur r√©cup√©ration token local:', error);
        return null;
    }
}

//
// üóëÔ∏è Supprimer le token (d√©connexion)
//
export async function removeExpoPushToken(userId) {
    try {
        console.log('üóëÔ∏è Suppression token pour userId:', userId);

        // Supprimer de la base (mettre √† NULL)
        if (userId) {
            const { error } = await supabase
                .from('utilisateurs')
                .update({ expo_push_token: null })
                .eq('id', userId);

            if (error) {
                console.error('‚ùå Erreur suppression token base:', error);
            } else {
                console.log('‚úÖ Token supprim√© de la base (mis √† NULL)');
            }
        }

        // Supprimer localement
        if (Platform.OS !== 'web') {
            await AsyncStorage.removeItem('expo_push_token');
            console.log('‚úÖ Token supprim√© localement');
        }
    } catch (error) {
        console.error('‚ùå Erreur removeExpoPushToken:', error);
    }
}

//
// üîç R√©cup√©rer tous les tokens pour envoyer des notifications en masse
//
export async function getAllActiveTokens(clubId = null) {
    try {
        let query = supabase
            .from('utilisateurs')
            .select('id, expo_push_token, nom, prenom')
            .not('expo_push_token', 'is', null);

        // Filtrer par club si sp√©cifi√©
        if (clubId) {
            query = query.eq('club_id', clubId);
        }

        const { data, error } = await query;

        if (error) {
            console.error('‚ùå Erreur r√©cup√©ration tokens:', error);
            return [];
        }

        // Retourner seulement les tokens valides
        return data
            .filter((user) => user.expo_push_token && user.expo_push_token.trim() !== '')
            .map((user) => ({
                userId: user.id,
                token: user.expo_push_token,
                nom: user.nom,
                prenom: user.prenom,
            }));
    } catch (error) {
        console.error('‚ùå Erreur getAllActiveTokens:', error);
        return [];
    }
}

//
// üîî Envoi d'une notification locale
//
export async function envoyerNotificationLocale(titre, corps, data = {}) {
    if (Platform.OS === 'web') {
        console.log(`[Web] Notification simul√©e : ${titre} - ${corps}`);
        return;
    }

    try {
        await Notifications.scheduleNotificationAsync({
            content: {
                title: titre,
                body: corps,
                sound: true,
                data: data,
            },
            trigger: null, // Imm√©diat
        });

        console.log('‚úÖ Notification locale envoy√©e');
    } catch (error) {
        console.error('‚ùå Erreur notification locale:', error);
    }
}

//
// üì± Configuration des listeners pour les notifications re√ßues
//
export function setupNotificationListeners() {
    if (Platform.OS === 'web') {
        return;
    }

    // Listener pour les notifications re√ßues quand l'app est ouverte
    const notificationListener = Notifications.addNotificationReceivedListener((notification) => {
        console.log('üîî Notification re√ßue:', notification);
        // Vous pouvez traiter la notification ici
    });

    // Listener pour les interactions avec les notifications
    const responseListener = Notifications.addNotificationResponseReceivedListener((response) => {
        console.log('üëÜ Notification touch√©e:', response);
        // Naviguer vers un √©cran sp√©cifique, etc.
        const data = response.notification.request.content.data;
        if (data) {
            console.log('üìÑ Donn√©es notification:', data);
            // Exemple : naviguer vers un √©cran sp√©cifique
            // navigation.navigate('EventDetails', { eventId: data.eventId });
        }
    });

    // Fonction de nettoyage
    return () => {
        Notifications.removeNotificationSubscription(notificationListener);
        Notifications.removeNotificationSubscription(responseListener);
    };
}

//
// üöÄ Fonction utilitaire pour initialiser lors du login
//
export async function initializeNotificationsForUser(userId) {
    try {
        console.log('üöÄ Initialisation notifications pour utilisateur:', userId);

        // 1. Configurer les notifications et r√©cup√©rer le token
        const newToken = await setupNotifications(userId);

        if (newToken) {
            console.log('‚úÖ Notifications initialis√©es avec succ√®s');

            // 2. Configurer les listeners
            const cleanup = setupNotificationListeners();

            return { token: newToken, cleanup };
        } else {
            console.warn("‚ö†Ô∏è Impossible d'initialiser les notifications");
            return { token: null, cleanup: null };
        }
    } catch (error) {
        console.error('‚ùå Erreur initializeNotificationsForUser:', error);
        return { token: null, cleanup: null };
    }
}

//
// ‚úÖ R√©cup√©ration des √©v√©nements vus (votre code existant)
//
export async function getVuEvenements() {
    try {
        if (Platform.OS === 'web') {
            const data = localStorage.getItem('vu_evenements');
            return data ? JSON.parse(data) : [];
        } else {
            const data = await AsyncStorage.getItem('vu_evenements');
            return data ? JSON.parse(data) : [];
        }
    } catch (error) {
        console.error('‚ùå Erreur getVuEvenements:', error);
        return [];
    }
}

//
// ‚úÖ Enregistrement des √©v√©nements vus (votre code existant)
//
export async function setVuEvenements(ids) {
    const stringified = JSON.stringify(ids);

    if (Platform.OS === 'web') {
        localStorage.setItem('vu_evenements', stringified);
    } else {
        await AsyncStorage.setItem('vu_evenements', stringified);
    }
}
