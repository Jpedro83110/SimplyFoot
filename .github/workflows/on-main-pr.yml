# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Valid

on:
    pull_request:
        branches: ['main']

jobs:
    lint:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [22.x]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'
            - run: npm ci
            - run: npm run lint

    prettier:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [22.x]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'
            - run: npm ci
            - run: npm run prettier

    build:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [22.x]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'
            - run: npm ci
            - run: npm run build

    test:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        strategy:
            matrix:
                node-version: [22.x]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'
            - run: npm ci

            - name: Run tests with coverage
              id: test-coverage
              run: |
                  echo "TEST_OUTPUT<<EOF" >> $GITHUB_OUTPUT
                  npm run test:coverage | grep 'All files' | awk -F'|' '{ print "Statements" $2 "%\nBranches" $3 "%\nFunctions" $4 "%\nLines" $5 "%" }' | column -t >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Comment PR with coverage
              uses: actions/github-script@v7
              with:
                  script: |
                      const coverageSummary = process.env.TEST_OUTPUT;
                      const comment = `<!-- coverage-comment -->
                      ## üß™ Test Coverage Summary

                      \`\`\`
                      ------------------------------------|---------|----------|---------|---------
                                                          | % Stmts | % Branch | % Funcs | % Lines
                      ------------------------------------|---------|----------|---------|---------
                      ${coverageSummary}
                      ------------------------------------|---------|----------|---------|---------
                      \`\`\`

                      _Coverage generated by \`npm run test:coverage\` on commit ${{ github.sha }}_`;

                      const { data: comments } = await github.rest.issues.listComments({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                      });

                      const botComment = comments.find(comment => 
                          comment.user.type === 'Bot' && 
                          comment.body.includes('<!-- coverage-comment -->')
                      );

                      if (botComment) {
                          // Mettre √† jour le commentaire existant
                          await github.rest.issues.updateComment({
                              comment_id: botComment.id,
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: comment
                          });
                      } else {
                          // Cr√©er un nouveau commentaire
                          await github.rest.issues.createComment({
                              issue_number: context.issue.number,
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: comment
                          });
                      }
              env:
                  TEST_OUTPUT: ${{ steps.test-coverage.outputs.TEST_OUTPUT }}

    stats:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        strategy:
            matrix:
                node-version: [22.x]

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'
            - run: npm ci

            - name: Generate code statistics
              id: stats
              run: |
                  echo "STATS_OUTPUT<<EOF" >> $GITHUB_OUTPUT
                  npm run stats >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Comment PR with stats
              uses: actions/github-script@v7
              with:
                  script: |
                      const statsOutput = process.env.STATS_OUTPUT;
                      const comment = `<!-- statistics-comment -->
                      ## üìä Code Statistics

                      \`\`\`
                      ${statsOutput}
                      \`\`\`

                      _Statistics generated by \`npm run stats\` on commit ${{ github.sha }}_`;

                      const { data: comments } = await github.rest.issues.listComments({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                      });

                      const botComment = comments.find(comment => 
                          comment.user.type === 'Bot' && 
                          comment.body.includes('<!-- statistics-comment -->')
                      );

                      if (botComment) {
                          // Mettre √† jour le commentaire existant
                          await github.rest.issues.updateComment({
                              comment_id: botComment.id,
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: comment
                          });
                      } else {
                          // Cr√©er un nouveau commentaire
                          await github.rest.issues.createComment({
                              issue_number: context.issue.number,
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: comment
                          });
                      }
              env:
                  STATS_OUTPUT: ${{ steps.stats.outputs.STATS_OUTPUT }}
